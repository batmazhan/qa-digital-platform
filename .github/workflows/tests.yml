name: Run QA Tests

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    # If you use private registries, uncomment and set up credentials
    # env:
    #   DOCKER_BUILDKIT: "1"
    #   PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}  # optional (Percy visual tests)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Docker & Compose versions
        run: |
          docker --version
          docker compose version

      - name: Build & start stack (detached)
        run: |
          docker compose up -d --build
          docker compose ps

      - name: Wait for health (Drupal 8080, Frontend 3001)
        run: |
          echo "Waiting for Drupal @ http://localhost:8080 ..."
          for i in {1..60}; do
            if curl -sf http://localhost:8080/jsonapi/node/article > /dev/null; then
              echo "Drupal is up"; break
            fi
            sleep 2
          done
          echo "Waiting for Frontend @ http://localhost:3001 ..."
          for i in {1..60}; do
            if curl -sf http://localhost:3001 > /dev/null; then
              echo "Frontend is up"; break
            fi
            sleep 2
          done

      - name: Capture container IDs from Compose
        id: ids
        shell: bash
        run: |
          DRUPAL_ID=$(docker compose ps -q drupal)
          FRONTEND_ID=$(docker compose ps -q frontend)
          echo "drupal_id=$DRUPAL_ID" >> $GITHUB_OUTPUT
          echo "frontend_id=$FRONTEND_ID" >> $GITHUB_OUTPUT
          echo "Drupal:   $DRUPAL_ID"
          echo "Frontend: $FRONTEND_ID"

      - name: Run PHPUnit (Drupal unit tests)
        run: |
          docker exec -i "${{ steps.ids.outputs.drupal_id }}" \
            /opt/phpunit.phar /var/www/html/modules/custom/example/tests/unit

      - name: Run Cypress (frontend E2E)
        # If youâ€™ve integrated Percy, wrap with: npx percy exec -- npx cypress run
        run: |
          docker exec -i "${{ steps.ids.outputs.frontend_id }}" npx cypress run

      # Helpful logs if anything failed
      - name: Dump container logs (on failure)
        if: failure()
        run: |
          echo "== Docker Compose Logs =="
          docker compose logs --no-color --timestamps drupal frontend db || true

      # Upload Cypress artifacts (videos/screenshots) from inside the container
      - name: Copy Cypress artifacts out of container
        if: always()
        run: |
          FRONTEND_ID="${{ steps.ids.outputs.frontend_id }}"
          mkdir -p cypress-artifacts/videos cypress-artifacts/screenshots
          # adjust paths if your Cypress config is different
          docker cp "$FRONTEND_ID:/app/cypress/videos/."      cypress-artifacts/videos || true
          docker cp "$FRONTEND_ID:/app/cypress/screenshots/." cypress-artifacts/screenshots || true

      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress-artifacts/videos
            cypress-artifacts/screenshots

      - name: Stop & clean up
        if: always()
        run: docker compose down -v
